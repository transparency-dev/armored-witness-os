/*
 * Copyright 2022 The Armored Witness OS authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option go_package = "./;api";

package api;

/*

Trusted Applet updates are supported with a sequence that splits the applet
payload as follows:

```
  host > armory: AppletUpdate{
    Total:   <n>,
    Seq:     0,
    Payload: <applet signature>,
  }

  host > armory: AppletUpdate{
    Total    <n>,
    Seq:     1,
    Payload: <first applet data chunk>,
  }

...

  host > armory: AppletUpdate{
    Total:   <n>,
    Seq:     <n>,
    Payload: <last applet data chunk>,
  }
```

The host PC software is responsible for extracting the invidual protobuf
messages already pre-assembled in the applet update file, to transmit them
individually.

The applet image includes a signature for pre-flashing verification in the
first chunk. This signature is verified with a minisign public key stored
within the Trusted OS.

Once all applet chunks are received the Trusted OS verifies the received
firmware signature and, if successful, it flashes it on the internal eMMC card.

Such change also updates the internal eMMC RPMB protected applet version value,
which is checked at each boot.

The applet chunk message is sent with the `U2FHID_ARMORY_OTA` vendor specific
command.

*/

/*

AppletUpdate

A `AppletUpdate` represents an OTA sequence applet slice.

The `TotalChunks` value indicates the total number of chunks for the update,
`Seq` is the transmitted `Data` chunk number (starting with 1 as the value for
the first chunk).

*/
message AppletUpdate {
	uint32 Total = 1;
	uint32 Seq   = 2;
	bytes  Data  = 3;
}

/*

Status information

The status information format is returned on any message sent with the
`U2FHID_ARMORY_INF` vendor specific command.

*/
message Status {
	string Serial         = 1;
	bool   HAB            = 2;
	string Revision       = 3;
	string Build          = 4;
	uint32 Version        = 5;
	string Runtime        = 6;
	bool   Link           = 7;
	WitnessStatus Witness = 8;
}

/*

WitnessStatus contains witness-applet specific status information.

This is embedded in the general Status message if the applet has provided
this information to the OS.

*/
message WitnessStatus {
	// Identity is the note-formatted public key which can be used to verify
	// checkpoints cosigned by this witness.
	string Identity  = 1;
	// IP is a string representation of the witness applet's current IP address.
	string IP        = 2;
}

/*

Trusted Applet configuration

The trusted applet configuration format, any configuration exchange will cause
an existing trusted applet instance to be termimnated for re-initialization.

The configuration message is sent with the `U2FHID_ARMORY_CFG` vendor specific
command.

*/

message Configuration {
	bool   DHCP      = 1;
	string IP        = 2;
	string Netmask   = 3;
	string Gateway   = 4;
	string Resolver  = 5;
	string NTPServer = 6;
}

message Response {
	ErrorCode Error   = 1;
	bytes     Payload = 2;
}

enum ErrorCode {
	NONE = 0;

	// GENERIC_ERROR is returned in case of a generic error, in this case
	// Payload might contain the error string.
	GENERIC_ERROR = 1;
}
