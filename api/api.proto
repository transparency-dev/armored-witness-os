/*
 * Copyright 2022 The Armored Witness OS authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package api;

option go_package = "./;api";

/*

Status information

The status information format is returned on any message sent with the
`U2FHID_ARMORY_INF` vendor specific command.

*/
message Status {
  string Serial = 1;
  bool HAB = 2;
  string Revision = 3;
  string Build = 4;
  string Version = 5;
  string Runtime = 6;
  bool Link = 7;
  WitnessStatus Witness = 8;
  // IdentityCounter is incremented when the device is recovered and the device
  // needs a new witness identity.
  uint32 IdentityCounter = 9;
  string SRKHash = 10;
}

/*

WitnessStatus contains witness-applet specific status information.

This is embedded in the general Status message if the applet has provided
this information to the OS.

*/
message WitnessStatus {
  // Identity is the note-formatted public key which can be used to verify
  // checkpoints cosigned by this witness.
  string Identity = 1;
  // IP is a string representation of the witness applet's current IP address.
  string IP = 2;
  // IDAttestKey is the stable public key from this device, used to attest to all derived witness identities.
  string IDAttestPublicKey = 3;
  // AttestedID is a note-formatted signed attestation for the current witness identity.
  // This attestation note contains:
	//   "ArmoredWitness ID attestation v1"
	//   <Device serial>
	//   <Witness identity counter in decimal>
	//   <Witness identity as a note verifier string>
  string AttestedID = 4;
}

/*

Trusted Applet configuration

The trusted applet configuration format, any configuration exchange will cause
an existing trusted applet instance to be termimnated for re-initialization.

The configuration message is sent with the `U2FHID_ARMORY_CFG` vendor specific
command.

*/

message Configuration {
  bool DHCP = 1;
  string IP = 2;
  string Netmask = 3;
  string Gateway = 4;
  string Resolver = 5;
  string NTPServer = 6;
}

/*

Log messages

*/

message LogMessagesRequest {
  bool Continue = 1;
}

message LogMessagesResponse {
  bytes Payload = 1;
  bool More = 2;
}

message Response {
  ErrorCode Error = 1;
  bytes Payload = 2;
}

enum ErrorCode {
  NONE = 0;

  // GENERIC_ERROR is returned in case of a generic error, in this case
  // Payload might contain the error string.
  GENERIC_ERROR = 1;
}
